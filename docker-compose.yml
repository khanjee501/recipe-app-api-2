# Use Docker Compose version 3.9
version: "3.9"

services:
  # Define a service named 'app' — this will be our Django application container
  app:
    # Build the Docker image using the Dockerfile located in our current directory (.)
    build:
      context: .
      # args used to run requirements.dev.txt in local. Will be overridden in Dockerfile
      args:
        - DEV=true

    # Map port 8000 on our host machine to port 8000 inside the container
    # So we can access the Django development server at http://localhost:8000
    ports:
      - "8000:8000"

    # Mount our local ./app directory into the container’s /app directory
    # This way, changes we make in our code reflect instantly inside the container — perfect for development
    volumes:
      - ./app:/app

    # Set the container command to run the Django development server
    # '0.0.0.0' tells it to listen on all interfaces, which is required inside Docker
    command: >
      sh -c "python manage.py wait_for_db && configs:
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    environment:
      - DB_HOST=db
      - DB_NAME=devdb
      - DB_USER=devuser
      - DB_PASS=devpasswordwqewg82461537289787|&^$%^|^%#$@&*6878454&%%#@gfygh
    depends_on:
      - db

  db:
    image: postgres:13-alpine
    volumes:
      - dev-db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=devuser
      - POSTGRES_PASSWORD=devpasswordwqewg82461537289787|&^$%^|^%#$@&*6878454&%%#@gfygh
      - POSTGRES_DB=devdb

volumes:
  dev-db-data: